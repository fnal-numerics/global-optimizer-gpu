Production main() running
number of optimizations = 2 max_iter = 1024 dim = 2
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 4. GoldsteinPrice
 5. Eggholder
 6. Himmelblau
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69598733953753857171437039049415072095056137951375743927532857938371425233557268494286392349657862356352288934025883527348688634934896747942670619270910389651010779377781431949712191333585933721769187656510458495683802680125900998746777189075840913815605096265598471780696064.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  -711182953261007198340170058146255030141862356020944121557989859647080884626304764610192876222633002774790582823797477629974318738398258358065599512166835953904380113386836032764910162902337272008467477125212615707405306716400262641748076849237012388398497792.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 1024


f0 = 69509.654250
Optimization Kernel execution time = 5.171200 ms

Global Minima: 0.000000
Global Minima Index: 0
Coordinates associated with Global Minima:
x[0] = 1.000000
x[1] = 1.000000

Success!! No Error!
first 20 function values in hostResults
 0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69598733953753857171437039049415072095056137951375743927532857938371425233557268494286392349657862356352288934025883527348688634934896747942670619270910389651010779377781431949712191333585933721769187656510458495683802680125900998746777189075840913815605096265598471780696064.000000  0.000000  1.000000  1.000000  0.000000  0.000000  0.000000  -711182953261007198340170058146255030141862356020944121557989859647080884626304764610192876222633002774790582823797477629974318738398258358065599512166835953904380113386836032764910162902337272008467477125212615707405306716400262641748076849237012388398497792.000000  0.000000  0.000000  0.000000  0.000000 

Do you want to optimize another function? (y/n): 