Production main() running
number of optimizations = 1 max_iter = 2048 dim = 2
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 4. GoldsteinPrice
 5. Eggholder
 6. Himmelblau
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69603326715534634303562999694785783187478123395791590397214490624128994507602613418939041037495350475939545678765754385940649894257203657017678657795660164240612263153110811218821037997200038093079972266365476153351194094245063371994610393342399742002865844785402825804873728.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  42769933579843935455113095918102368546682257179178399815315222059980960958498781995758838010388827124429711032374917027634330720667436375155039655737554715029105076664629028580553589661576159818924289632505614464784706887183270895657441632901398528.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 1024


f0 = 69509.654250
Optimization Kernel execution time = 3.868672 ms

Global Minima: 0.000000
Global Minima Index: 0
Coordinates associated with Global Minima:
x[0] = 1.000000
x[1] = 1.000000

Success!! No Error!
first 20 function values in hostResults
 0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69603326715534634303562999694785783187478123395791590397214490624128994507602613418939041037495350475939545678765754385940649894257203657017678657795660164240612263153110811218821037997200038093079972266365476153351194094245063371994610393342399742002865844785402825804873728.000000  0.000000  1.000000  1.000000  0.000000  0.000000  0.000000  42769933579843935455113095918102368546682257179178399815315222059980960958498781995758838010388827124429711032374917027634330720667436375155039655737554715029105076664629028580553589661576159818924289632505614464784706887183270895657441632901398528.000000  0.000000  0.000000  0.000000  0.000000 

Do you want to optimize another function? (y/n): 