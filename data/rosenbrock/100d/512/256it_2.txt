Production main() running
number of optimizations = 2 max_iter = 256 dim = 100
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244686821830291752655208939024708233283211171164222697062684459249586973814908089768812621677451012583162442336904549500920629335793492488044316715472524004511236194927326506438761110155797649592263310804365981588476187026490930109709349600709490672067121001054907014316032.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 256
Save optimization trajectories? (y/n): 

f0 = 1299132.317752
Optimization Kernel execution time = 1421919.500000 ms

Global Minima: 74.530711
Global Minima Index: 1
Coordinates associated with Global Minima:
x[0] = 1.002164
x[1] = 0.998158
x[2] = 0.995148
x[3] = 1.000112
x[4] = 1.002009
x[5] = 1.003061
x[6] = 1.001039
x[7] = 0.999720
x[8] = 1.000389
x[9] = 0.999791
x[10] = 0.999898
x[11] = 1.000623
x[12] = 0.998005
x[13] = 0.998893
x[14] = 0.999065
x[15] = 0.997107
x[16] = 0.994979
x[17] = 0.989529
x[18] = 0.977559
x[19] = 0.953559
x[20] = 0.904886
x[21] = 0.816770
x[22] = 0.672578
x[23] = 0.446364
x[24] = 0.189419
x[25] = 0.039652
x[26] = 0.010799
x[27] = 0.004859
x[28] = 0.005772
x[29] = 0.008618
x[30] = 0.010834
x[31] = 0.019130
x[32] = 0.016491
x[33] = 0.010464
x[34] = 0.015000
x[35] = 0.008849
x[36] = 0.001839
x[37] = 0.012207
x[38] = 0.013343
x[39] = 0.013245
x[40] = 0.001837
x[41] = 0.010274
x[42] = -0.000601
x[43] = 0.014489
x[44] = 0.007399
x[45] = 0.010577
x[46] = 0.009478
x[47] = 0.011221
x[48] = 0.006964
x[49] = 0.007489
x[50] = 0.016945
x[51] = 0.006707
x[52] = 0.005010
x[53] = 0.012202
x[54] = 0.016827
x[55] = 0.010581
x[56] = 0.010974
x[57] = 0.010332
x[58] = 0.002129
x[59] = 0.003926
x[60] = -0.000399
x[61] = 0.009444
x[62] = 0.012382
x[63] = 0.002885
x[64] = 0.006226
x[65] = 0.013401
x[66] = 0.010369
x[67] = 0.009472
x[68] = 0.013158
x[69] = 0.018514
x[70] = 0.017621
x[71] = 0.014558
x[72] = 0.009169
x[73] = 0.009097
x[74] = 0.022285
x[75] = 0.016965
x[76] = 0.010359
x[77] = 0.009119
x[78] = 0.000739
x[79] = 0.013492
x[80] = 0.001351
x[81] = 0.010700
x[82] = 0.010214
x[83] = 0.007872
x[84] = 0.008931
x[85] = 0.008266
x[86] = 0.009778
x[87] = 0.009931
x[88] = 0.010022
x[89] = 0.008714
x[90] = 0.013591
x[91] = 0.004139
x[92] = 0.005315
x[93] = 0.016691
x[94] = 0.009242
x[95] = 0.008856
x[96] = 0.003524
x[97] = 0.023644
x[98] = -0.000079
x[99] = -0.001023

Success!! No Error!
first 20 function values in hostResults
 83.989101  74.530711  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244686821830291752655208939024708233283211171164222697062684459249586973814908089768812621677451012583162442336904549500920629335793492488044316715472524004511236194927326506438761110155797649592263310804365981588476187026490930109709349600709490672067121001054907014316032.000000  0.000000  1.002164  0.998158  0.995148  1.000112  1.002009  1.003061  1.001039  0.999720  1.000389  0.999791 

Do you want to optimize another function? (y/n): 