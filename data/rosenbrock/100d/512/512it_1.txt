Production main() running
number of optimizations = 1 max_iter = 512 dim = 100
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69589205354398058149060862691524137252980937172227847957217245336434858806284467446152741239133294506253239648665657332469711951590799214489521789571479245114243022509306446472201400075167233223545097869122475530173220764252071936921039297428048641490218152121148357105156096.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 256
Save optimization trajectories? (y/n): 

f0 = 1299132.317752
Optimization Kernel execution time = 2787258.250000 ms

Global Minima: 35.135172
Global Minima Index: 0
Coordinates associated with Global Minima:
x[0] = 0.999629
x[1] = 1.000046
x[2] = 1.000862
x[3] = 1.000705
x[4] = 0.999855
x[5] = 1.000449
x[6] = 1.000605
x[7] = 1.000157
x[8] = 1.000797
x[9] = 0.999573
x[10] = 1.000248
x[11] = 0.999976
x[12] = 0.999476
x[13] = 1.000567
x[14] = 1.000010
x[15] = 1.000086
x[16] = 0.999925
x[17] = 0.999940
x[18] = 1.000381
x[19] = 0.999934
x[20] = 0.999319
x[21] = 1.000117
x[22] = 0.999845
x[23] = 0.999563
x[24] = 0.999916
x[25] = 0.999923
x[26] = 0.999397
x[27] = 0.999373
x[28] = 0.999124
x[29] = 0.999233
x[30] = 0.999711
x[31] = 1.000094
x[32] = 0.999996
x[33] = 1.000122
x[34] = 0.999644
x[35] = 0.999719
x[36] = 1.001490
x[37] = 1.000640
x[38] = 1.000555
x[39] = 1.000755
x[40] = 1.000396
x[41] = 1.000728
x[42] = 1.000910
x[43] = 1.000232
x[44] = 1.000511
x[45] = 1.001128
x[46] = 1.000823
x[47] = 1.001456
x[48] = 1.000575
x[49] = 1.000971
x[50] = 0.998078
x[51] = 0.998133
x[52] = 1.000047
x[53] = 1.005149
x[54] = 0.997673
x[55] = 0.992074
x[56] = 0.986318
x[57] = 0.983582
x[58] = 0.973192
x[59] = 0.950685
x[60] = 0.894015
x[61] = 0.807114
x[62] = 0.659894
x[63] = 0.404915
x[64] = 0.138970
x[65] = 0.015020
x[66] = 0.010442
x[67] = 0.009034
x[68] = 0.005183
x[69] = 0.009661
x[70] = 0.011848
x[71] = 0.012080
x[72] = 0.009707
x[73] = 0.011781
x[74] = 0.010409
x[75] = 0.011538
x[76] = 0.009966
x[77] = 0.009195
x[78] = 0.011347
x[79] = 0.011174
x[80] = 0.012861
x[81] = 0.009587
x[82] = 0.012817
x[83] = 0.007022
x[84] = 0.010678
x[85] = 0.008777
x[86] = 0.014054
x[87] = 0.007862
x[88] = 0.010312
x[89] = 0.008743
x[90] = 0.011126
x[91] = 0.010506
x[92] = 0.009889
x[93] = 0.009109
x[94] = 0.008219
x[95] = 0.010288
x[96] = 0.009944
x[97] = 0.011070
x[98] = 0.012496
x[99] = -0.001488

Success!! No Error!
first 20 function values in hostResults
 35.135172  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69589205354398058149060862691524137252980937172227847957217245336434858806284467446152741239133294506253239648665657332469711951590799214489521789571479245114243022509306446472201400075167233223545097869122475530173220764252071936921039297428048641490218152121148357105156096.000000  0.000000  0.999629  1.000046  1.000862  1.000705  0.999855  1.000449  1.000605  1.000157  1.000797  0.999573 

Do you want to optimize another function? (y/n): 