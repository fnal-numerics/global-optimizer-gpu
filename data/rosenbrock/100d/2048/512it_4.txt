Production main() running
number of optimizations = 4 max_iter = 512 dim = 100
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  333777.000000  333777.000000  333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244686821830291752655208939024708233283211171164222697062684459249586973814908089768812621677451012583162442336904549500920629335793492488044316715472524004511236194927326506438761110155797649592263310804365981588476187026490930109709349600709490672067121001054907014316032.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 256
Save optimization trajectories? (y/n): 
Optimization Kernel execution time = 769.893372 ms

Global Minima: 333777.000000
Global Minima Index: 0
Coordinates associated with Global Minima:
x[0] = 0.000000
x[1] = 0.000000
x[2] = 0.000000
x[3] = 0.000000
x[4] = 0.000000
x[5] = 0.000000
x[6] = 0.000000
x[7] = 0.000000
x[8] = 0.000000
x[9] = 0.000000
x[10] = 0.000000
x[11] = 0.000000
x[12] = 0.000000
x[13] = 0.000000
x[14] = 0.000000
x[15] = 0.000000
x[16] = 0.000000
x[17] = 0.000000
x[18] = 0.000000
x[19] = 0.000000
x[20] = 0.000000
x[21] = 0.000000
x[22] = 0.000000
x[23] = 0.000000
x[24] = 0.000000
x[25] = 0.000000
x[26] = 0.000000
x[27] = 0.000000
x[28] = 0.000000
x[29] = 0.000000
x[30] = 0.000000
x[31] = 0.000000
x[32] = 0.000000
x[33] = 0.000000
x[34] = 0.000000
x[35] = 0.000000
x[36] = 0.000000
x[37] = 0.000000
x[38] = 0.000000
x[39] = 0.000000
x[40] = 0.000000
x[41] = 0.000000
x[42] = 0.000000
x[43] = 0.000000
x[44] = 0.000000
x[45] = 0.000000
x[46] = 0.000000
x[47] = 0.000000
x[48] = 0.000000
x[49] = 0.000000
x[50] = 0.000000
x[51] = 0.000000
x[52] = 0.000000
x[53] = 0.000000
x[54] = 0.000000
x[55] = 0.000000
x[56] = 0.000000
x[57] = 0.000000
x[58] = 0.000000
x[59] = 0.000000
x[60] = 0.000000
x[61] = 0.000000
x[62] = 0.000000
x[63] = 0.000000
x[64] = 0.000000
x[65] = 0.000000
x[66] = 0.000000
x[67] = 0.000000
x[68] = 0.000000
x[69] = 0.000000
x[70] = 0.000000
x[71] = 0.000000
x[72] = 0.000000
x[73] = 0.000000
x[74] = 0.000000
x[75] = 0.000000
x[76] = 0.000000
x[77] = 0.000000
x[78] = 0.000000
x[79] = 0.000000
x[80] = 0.000000
x[81] = 0.000000
x[82] = 0.000000
x[83] = 0.000000
x[84] = 0.000000
x[85] = 0.000000
x[86] = 0.000000
x[87] = 0.000000
x[88] = 0.000000
x[89] = 0.000000
x[90] = 0.000000
x[91] = 0.000000
x[92] = 0.000000
x[93] = 0.000000
x[94] = 0.000000
x[95] = 0.000000
x[96] = 0.000000
x[97] = 0.000000
x[98] = 0.000000
x[99] = 0.000000

Success!! No Error!
first 20 function values in hostResults
 333777.000000  333777.000000  333777.000000  333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244686821830291752655208939024708233283211171164222697062684459249586973814908089768812621677451012583162442336904549500920629335793492488044316715472524004511236194927326506438761110155797649592263310804365981588476187026490930109709349600709490672067121001054907014316032.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000 

Do you want to optimize another function? (y/n): 