Production main() running
number of optimizations = 2 max_iter = 64 dim = 100
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244620849959996527360363997105033511516382409580350170832105785815177407478368907097149092733000261914301852098624150411641046956216888711461192335107300047315325848337311703960984724133475258963452179847666149385069131740974019234937714109493829016792033665211243897552896.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 256
Save optimization trajectories? (y/n): 

f0 = 1299132.317752
Optimization Kernel execution time = 356547.406250 ms

Global Minima: 3883.914591
Global Minima Index: 0
Coordinates associated with Global Minima:
x[0] = -0.259038
x[1] = -0.660832
x[2] = 0.871104
x[3] = 1.181382
x[4] = 1.367887
x[5] = 1.332314
x[6] = 0.920578
x[7] = 0.838681
x[8] = -0.140014
x[9] = -0.859880
x[10] = 0.658600
x[11] = 0.583291
x[12] = 0.693738
x[13] = 0.157668
x[14] = 0.567155
x[15] = 0.566762
x[16] = 1.076131
x[17] = 0.334425
x[18] = -0.665169
x[19] = -0.949906
x[20] = 0.616260
x[21] = -0.587854
x[22] = 0.379723
x[23] = -0.700758
x[24] = 0.296693
x[25] = 0.435807
x[26] = 0.269273
x[27] = -0.133497
x[28] = -0.995144
x[29] = 0.126022
x[30] = -1.182320
x[31] = 1.278822
x[32] = 0.837662
x[33] = 1.248264
x[34] = 0.841699
x[35] = 0.684620
x[36] = 0.494017
x[37] = 0.247960
x[38] = -0.342149
x[39] = -0.347468
x[40] = -0.984838
x[41] = 1.044724
x[42] = 1.225662
x[43] = 1.353649
x[44] = 0.803417
x[45] = -0.634297
x[46] = 1.087991
x[47] = 0.773247
x[48] = 0.913259
x[49] = 0.370374
x[50] = -0.615099
x[51] = 0.010890
x[52] = -1.076113
x[53] = 1.103847
x[54] = 0.937862
x[55] = 0.599692
x[56] = -0.869717
x[57] = 0.336550
x[58] = 0.360493
x[59] = -0.220583
x[60] = -0.107101
x[61] = -0.427057
x[62] = -0.554200
x[63] = -0.080732
x[64] = 0.665034
x[65] = 0.839284
x[66] = 1.230692
x[67] = 0.744476
x[68] = 0.802112
x[69] = -0.902847
x[70] = 0.947861
x[71] = 0.536923
x[72] = 0.473231
x[73] = -0.034742
x[74] = -0.289495
x[75] = 0.124574
x[76] = -0.908046
x[77] = 1.215164
x[78] = 1.274497
x[79] = 0.686220
x[80] = 0.157032
x[81] = 0.392273
x[82] = 0.234432
x[83] = -0.442861
x[84] = 0.659991
x[85] = -0.208380
x[86] = 0.973681
x[87] = 0.563546
x[88] = 0.928694
x[89] = 0.646795
x[90] = -0.917559
x[91] = 0.970301
x[92] = 0.438131
x[93] = -0.246813
x[94] = -0.786504
x[95] = 0.266446
x[96] = -0.400422
x[97] = 1.182495
x[98] = 1.788070
x[99] = 3.523961

Success!! No Error!
first 20 function values in hostResults
 3883.914591  7321.432899  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244620849959996527360363997105033511516382409580350170832105785815177407478368907097149092733000261914301852098624150411641046956216888711461192335107300047315325848337311703960984724133475258963452179847666149385069131740974019234937714109493829016792033665211243897552896.000000  0.000000  -0.259038  -0.660832  0.871104  1.181382  1.367887  1.332314  0.920578  0.838681  -0.140014  -0.859880 

Do you want to optimize another function? (y/n): 