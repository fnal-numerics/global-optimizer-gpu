Production main() running
number of optimizations = 4 max_iter = 32 dim = 100
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  333777.000000  333777.000000  333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244686821830291752655208939024708233283211171164222697062684459249586973814908089768812621677451012583162442336904549500920629335793492488044316715472524004511236194927326506438761110155797649592263310804365981588476187026490930109709349600709490672067121001054907014316032.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 256
Save optimization trajectories? (y/n): 

f0 = 1299132.317752
Optimization Kernel execution time = 178711.031250 ms

Global Minima: 25749.663537
Global Minima Index: 2
Coordinates associated with Global Minima:
x[0] = 0.273565
x[1] = -1.595796
x[2] = 0.942590
x[3] = -1.686882
x[4] = 0.266062
x[5] = -0.182705
x[6] = -0.730580
x[7] = 0.694774
x[8] = -0.605680
x[9] = -1.289662
x[10] = 1.272559
x[11] = 1.178774
x[12] = -0.120462
x[13] = 0.225811
x[14] = 0.780829
x[15] = 0.793443
x[16] = -1.259444
x[17] = 0.706379
x[18] = 1.328993
x[19] = -0.847208
x[20] = -0.364009
x[21] = -1.309716
x[22] = -1.618412
x[23] = 1.321850
x[24] = -0.173614
x[25] = -0.597853
x[26] = -0.683134
x[27] = -1.153074
x[28] = -1.771499
x[29] = 1.670632
x[30] = 1.773938
x[31] = 1.512420
x[32] = 1.066931
x[33] = -1.525121
x[34] = -0.872843
x[35] = -0.619544
x[36] = 1.507376
x[37] = -0.522856
x[38] = -1.215876
x[39] = 1.215266
x[40] = -1.097532
x[41] = -1.437017
x[42] = 1.151941
x[43] = -0.854444
x[44] = -0.005524
x[45] = -0.421195
x[46] = 1.300796
x[47] = 0.602461
x[48] = -1.265995
x[49] = 0.960300
x[50] = -1.613656
x[51] = 0.473719
x[52] = 0.924642
x[53] = -0.215146
x[54] = 1.034313
x[55] = -1.516279
x[56] = 0.992105
x[57] = -0.024555
x[58] = -0.977856
x[59] = -1.300715
x[60] = 0.295997
x[61] = 0.190494
x[62] = 1.544552
x[63] = 0.794918
x[64] = -0.657337
x[65] = -2.151646
x[66] = 1.552317
x[67] = 1.691819
x[68] = 1.382840
x[69] = -1.595058
x[70] = 1.050617
x[71] = 1.518359
x[72] = 1.624314
x[73] = 1.581912
x[74] = 0.552598
x[75] = 0.273711
x[76] = -1.571781
x[77] = 1.750154
x[78] = 1.501500
x[79] = 1.606057
x[80] = 0.064113
x[81] = 0.891523
x[82] = 0.941169
x[83] = 1.130224
x[84] = 1.823989
x[85] = 1.202174
x[86] = -0.085254
x[87] = -1.042063
x[88] = 1.043073
x[89] = -0.457277
x[90] = -1.055223
x[91] = 0.737709
x[92] = -1.140888
x[93] = 1.255334
x[94] = 1.175979
x[95] = -1.541274
x[96] = 1.035412
x[97] = -0.288781
x[98] = -0.307434
x[99] = 1.793881

Success!! No Error!
first 20 function values in hostResults
 65741.850031  85661.356171  25749.663537  53345.224244  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244686821830291752655208939024708233283211171164222697062684459249586973814908089768812621677451012583162442336904549500920629335793492488044316715472524004511236194927326506438761110155797649592263310804365981588476187026490930109709349600709490672067121001054907014316032.000000  0.000000  0.273565  -1.595796  0.942590  -1.686882  0.266062  -0.182705  -0.730580  0.694774 

Do you want to optimize another function? (y/n): 