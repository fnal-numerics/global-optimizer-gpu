Production main() running
number of optimizations = 8 max_iter = 128 dim = 100
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  333777.000000  333777.000000  333777.000000  333777.000000  333777.000000  333777.000000  333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244686821830291752655208939024708233283211171164222697062684459249586973814908089768812621677451012583162442336904549500920629335793492488044316715472524004511236194927326506438761110155797649592263310804365981588476187026490930109709349600709490672067121001054907014316032.000000  0.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 256
Save optimization trajectories? (y/n): 

f0 = 1299132.317752
Optimization Kernel execution time = 327375.937500 ms

Global Minima: 93.651998
Global Minima Index: 1
Coordinates associated with Global Minima:
x[0] = 0.999800
x[1] = 0.992968
x[2] = 0.984048
x[3] = 0.982987
x[4] = 0.976737
x[5] = 0.967221
x[6] = 0.932695
x[7] = 0.875382
x[8] = 0.770173
x[9] = 0.580616
x[10] = 0.322593
x[11] = 0.119157
x[12] = 0.009244
x[13] = 0.011986
x[14] = 0.034857
x[15] = 0.023809
x[16] = 0.025909
x[17] = 0.001217
x[18] = 0.014538
x[19] = 0.000621
x[20] = 0.021549
x[21] = 0.027406
x[22] = -0.011388
x[23] = 0.010875
x[24] = 0.032477
x[25] = 0.005712
x[26] = 0.004183
x[27] = 0.010940
x[28] = 0.023192
x[29] = 0.017788
x[30] = 0.003906
x[31] = 0.023418
x[32] = 0.015478
x[33] = 0.021617
x[34] = 0.005298
x[35] = 0.040286
x[36] = 0.011908
x[37] = 0.007055
x[38] = 0.003683
x[39] = 0.007026
x[40] = -0.011849
x[41] = 0.016515
x[42] = -0.000268
x[43] = -0.005691
x[44] = 0.015987
x[45] = 0.014353
x[46] = -0.027031
x[47] = 0.029313
x[48] = 0.002169
x[49] = 0.042942
x[50] = 0.024373
x[51] = -0.010374
x[52] = 0.009812
x[53] = 0.010903
x[54] = -0.023148
x[55] = 0.003569
x[56] = 0.004882
x[57] = -0.053053
x[58] = 0.004972
x[59] = -0.051669
x[60] = -0.017112
x[61] = 0.002972
x[62] = 0.011292
x[63] = 0.069187
x[64] = 0.000093
x[65] = 0.025634
x[66] = 0.022650
x[67] = -0.013904
x[68] = 0.008475
x[69] = -0.006642
x[70] = 0.002523
x[71] = -0.018106
x[72] = 0.028381
x[73] = 0.018765
x[74] = -0.012728
x[75] = -0.014381
x[76] = 0.008716
x[77] = 0.030380
x[78] = 0.036804
x[79] = 0.023318
x[80] = -0.012167
x[81] = 0.010963
x[82] = 0.001185
x[83] = -0.001624
x[84] = -0.018927
x[85] = 0.020210
x[86] = 0.025686
x[87] = 0.016069
x[88] = -0.005023
x[89] = 0.021077
x[90] = 0.014873
x[91] = 0.003001
x[92] = 0.036297
x[93] = 0.014705
x[94] = 0.008028
x[95] = -0.006234
x[96] = 0.020477
x[97] = 0.007868
x[98] = -0.157776
x[99] = 0.002662

Success!! No Error!
first 20 function values in hostResults
 102.484427  93.651998  114.569689  99.470493  168.053148  146.630544  181.010249  536.876451  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244686821830291752655208939024708233283211171164222697062684459249586973814908089768812621677451012583162442336904549500920629335793492488044316715472524004511236194927326506438761110155797649592263310804365981588476187026490930109709349600709490672067121001054907014316032.000000  0.000000  0.999800  0.992968  0.984048  0.982987 

Do you want to optimize another function? (y/n): 