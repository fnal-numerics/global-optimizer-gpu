Production main() running
number of optimizations = 2 max_iter = 512 dim = 100
Current stack size: 1024 bytes
Successfully set stack size to 65536 bytes

Select function to optimize:
 1. Rosenbrock
 2. Rastrigin
 3. Ackley
 7. Custom (user-defined objective via expression or kernel file)
Choice: 

	Rosenbrock Function

first 20 hostResults
 333777.000000  333777.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244620849959996527360363997105033511516382409580350170832105785815177407478368907097149092733000261914301852098624150411641046956216888711461192335107300047315325848337311703960984724133475258963452179847666149385069131740974019234937714109493829016792033665211243897552896.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000 
Recommended block size: 256
Save optimization trajectories? (y/n): 

f0 = 1299132.317752
Optimization Kernel execution time = 2316423.250000 ms

Global Minima: 22.939379
Global Minima Index: 1
Coordinates associated with Global Minima:
x[0] = 1.001143
x[1] = 0.999595
x[2] = 1.000329
x[3] = 1.000459
x[4] = 0.997430
x[5] = 0.998925
x[6] = 1.000809
x[7] = 0.999999
x[8] = 1.000408
x[9] = 0.999553
x[10] = 1.000558
x[11] = 1.000084
x[12] = 0.999648
x[13] = 1.000728
x[14] = 0.999704
x[15] = 0.999885
x[16] = 0.999880
x[17] = 1.000168
x[18] = 1.000077
x[19] = 1.000796
x[20] = 1.000689
x[21] = 1.000950
x[22] = 0.999454
x[23] = 0.999765
x[24] = 1.000188
x[25] = 1.000234
x[26] = 0.999979
x[27] = 1.000162
x[28] = 1.000164
x[29] = 1.000110
x[30] = 0.999701
x[31] = 0.999967
x[32] = 0.999722
x[33] = 0.999955
x[34] = 0.999865
x[35] = 0.999376
x[36] = 0.999256
x[37] = 0.999575
x[38] = 0.999147
x[39] = 0.998945
x[40] = 0.999535
x[41] = 0.999843
x[42] = 0.999903
x[43] = 1.000233
x[44] = 1.000425
x[45] = 1.000290
x[46] = 1.000690
x[47] = 1.000599
x[48] = 1.000526
x[49] = 1.000067
x[50] = 0.999359
x[51] = 0.999642
x[52] = 0.998424
x[53] = 0.999321
x[54] = 1.000043
x[55] = 1.000210
x[56] = 0.999457
x[57] = 0.999369
x[58] = 1.000196
x[59] = 1.000684
x[60] = 0.999675
x[61] = 0.998590
x[62] = 0.999764
x[63] = 0.998287
x[64] = 0.995769
x[65] = 0.994299
x[66] = 0.993705
x[67] = 0.993863
x[68] = 0.996259
x[69] = 0.986097
x[70] = 0.969772
x[71] = 0.946619
x[72] = 0.904300
x[73] = 0.826941
x[74] = 0.682026
x[75] = 0.450554
x[76] = 0.206508
x[77] = 0.023153
x[78] = 0.006228
x[79] = 0.011412
x[80] = 0.015373
x[81] = 0.010272
x[82] = 0.012056
x[83] = 0.009098
x[84] = 0.006461
x[85] = 0.009645
x[86] = 0.005913
x[87] = 0.011815
x[88] = 0.009053
x[89] = 0.009899
x[90] = 0.009707
x[91] = 0.008925
x[92] = 0.009381
x[93] = 0.011683
x[94] = 0.012519
x[95] = 0.006311
x[96] = 0.006842
x[97] = 0.010091
x[98] = 0.008471
x[99] = -0.000502

Success!! No Error!
first 20 function values in hostResults
 35.135172  22.939379  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  69244620849959996527360363997105033511516382409580350170832105785815177407478368907097149092733000261914301852098624150411641046956216888711461192335107300047315325848337311703960984724133475258963452179847666149385069131740974019234937714109493829016792033665211243897552896.000000  0.000000  1.001143  0.999595  1.000329  1.000459  0.997430  0.998925  1.000809  0.999999  1.000408  0.999553 

Do you want to optimize another function? (y/n): 